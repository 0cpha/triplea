buildscript {
	repositories {
		maven { url "https://plugins.gradle.org/m2/" }
		jcenter()
		mavenCentral()
		maven { url 'http://maven.ej-technologies.com/repository' }
	}
	dependencies {
		classpath "com.github.jengelman.gradle.plugins:shadow:1.2.2"
		classpath group: 'com.install4j', name: 'gradle-plugin', version: '6.0.4'
		classpath 'com.github.ben-manes:gradle-versions-plugin:0.11.3'
	}
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'com.github.ben-manes.versions'

group = 'triplea'

version = System.getenv("TAGGED_VERSION") ?: ""

description = 'TripleA is a free online turn based strategy game and board game engine, similar to such board games as Axis & Allies or Risk.'
mainClassName = "games.strategy.engine.framework.GameRunner"

compileJava.options.encoding = 'UTF-8'
sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) { options.incremental = true }

sourceSets {
	main {
		java { srcDir 'src' }
		resources { srcDir 'data' }
	}
	test {
		java { srcDirs 'test' }
	}
}

jar {
	manifest {
		attributes 'Main-Class': mainClassName, 'TripleA-Version': version
	}
}

repositories {
	jcenter()
}

dependencies {
	compile 'javax.activation:activation:1.1.1'
	compile 'commons-codec:commons-codec:1.10'
	compile 'commons-httpclient:commons-httpclient:3.1'
	compile 'commons-logging:commons-logging:1.2'

	compile 'com.github.insubstantial:flamingo:7.3'
	compile 'com.github.insubstantial:laf-plugin:7.3'
	compile 'com.github.insubstantial:laf-widget:7.3'
	compile 'com.github.insubstantial:substance:7.3'
	compile 'com.github.insubstantial:substance-swingx:7.3'
	compile 'com.github.insubstantial:substance-flamingo:7.3'
	compile 'com.github.insubstantial:trident:7.3'

	compile 'org.swinglabs.swingx:swingx-all:1.6.5-1'
	compile 'com.sun.mail:mailapi:1.5.4'
	compile 'com.sun.mail:smtp:1.5.4'
	compile 'com.google.guava:guava:18.0'

	compile files('lib/upnp.jar')
	compile files('lib/AppleJavaExtensions-1.6.jar')

	testCompile 'org.apache.derby:derby:10.11.1.1'
	testCompile 'org.hamcrest:hamcrest-all:1.3'
	testCompile 'junit:junit:4.12'
	testCompile 'org.mockito:mockito-all:1.10.19'
}

task allPlatform(type: Zip, group: 'release', dependsOn: ':shadowJar') {
	classifier 'all_platforms'
	['assets', 'dice_servers', 'doc', 'license', 'maps', 'old'].each { folder ->
		from(folder) {
			into(folder)
		}
	}
	from('icons') {
		into('icons')
		exclude('Icon.zip')
		exclude('icon.icns')
	}
	['readme.html', 'changelog.txt', 'system.ini', 'TripleA_RuleBook.pdf',
	 'run-headless-game-host-mac-os.sh', 'run-headless-game-host.sh', 'run-headless-game-host-windows.bat',
	 'triplea_unix.sh', 'triplea_windows.bat', 'triplea_mac_os_x.sh'].each { fileName ->
		from(fileName)
	}
	from("build/libs/triplea-${project.version}-all.jar") {
		into('bin')
		rename "triplea-${project.version}-all.jar", 'triplea.jar'
	}
}

task bots(type: Zip, group: 'release', dependsOn: ':shadowJar') {
	classifier 'bots'
	from('assets') {
		exclude('resources')
		exclude('sounds')
		exclude('territoryEffects')
	}
	from('icons') {
		into('icons')
		exclude('Icon.zip')
		exclude('icon.icns')
	}
	['dice_servers', 'doc', 'icons', 'license'].each { folder ->
		from(folder) {
			into(folder)
		}
	}
	['readme.html', 'changelog.txt', 'system.ini',
	 'run-headless-game-host-mac-os.sh', 'run-headless-game-host.sh', 'run-headless-game-host-windows.bat',
	 'triplea_unix.sh', 'triplea_windows.bat', 'triplea_mac_os_x.sh'].each { fileName ->
		from(fileName)
	}
	from("build/libs/triplea-${project.version}-all.jar") {
		into('bin')
		rename "triplea-${project.version}-all.jar", 'triplea.jar'
	}
}

task lobbyServer(type: Zip, group: 'release', dependsOn: ':shadowJar') {
	classifier 'server'
	['license'].each { folder ->
		from(folder) {
			into(folder)
		}
	}
	['run-headless-game-host.sh', 'run-server.sh'].each { fileName ->
		from(fileName)
	}
	from(configurations.testCompile.files { dep -> dep.name == 'derby' }) {
		into('lib')
	}
	from("build/libs/triplea-${project.version}-all.jar") {
		into('bin')
		rename "triplea-${project.version}-all.jar", 'triplea.jar'
	}
}

task generateZipReleases(group: 'release', dependsOn: [allPlatform, bots, lobbyServer]) {}

apply plugin: 'install4j'
task generateInstallers(type: com.install4j.gradle.Install4jTask, dependsOn: ':shadowJar', group: 'release') {
	projectFile = file('build.install4j')
	release project.version
	doFirst {
		logger.lifecycle("building installer release of version '${project.version}'")
	}
}

task setRunnableLinux(dependsOn:[generateInstallers]){
	doLast{
		def linuxFile = "triplea_unix_${project.version}.sh"
		ant.chmod(dir: "$buildDir/releases", perm: "0755", includes: linuxFile)	
	}
}

task release(group: 'release', dependsOn: [generateZipReleases, setRunnableLinux]) {}

gradle.taskGraph.whenReady { graph ->
	graph.getAllTasks().any({
		if (it.name == "generateInstallers") {
			if (!project.hasProperty('install4jHomeDir')) {
				File propertiesFile = file("${System.getProperty('user.home')}/.gradle/gradle.properties")
				throw new RuntimeException("Specify install4jHomeDir in $propertiesFile")
			}
			def p = file(project.install4jHomeDir)
			logger.lifecycle('using install4j home directory ' + p.getAbsolutePath())
			it.project.install4j.installDir = new File(project.install4jHomeDir)
		}
	})
}
